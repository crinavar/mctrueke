!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLOCKSIZE1D	src/main.cpp	15;"	d	file:
BX	src/main.cpp	12;"	d	file:
BY	src/main.cpp	13;"	d	file:
BZ	src/main.cpp	14;"	d	file:
C	src/structs.h	31;"	d
CHUNCKSIZE	src/main.cpp	20;"	d	file:
CORRLEN_POS	src/structs.h	27;"	d
C_POS	src/structs.h	25;"	d
E	src/structs.h	/^	double E;$/;"	m	struct:mc_data
E	src/structs.h	/^	float *exE, *E;$/;"	m	struct:setup
EXCHANGE_POS	src/structs.h	28;"	d
E_POS	src/structs.h	17;"	d
F	src/structs.h	/^	double F;$/;"	m	struct:mc_data
F1	src/structs.h	/^	float3_t *F1, *F2;$/;"	m	struct:setup
F2	src/structs.h	/^	float3_t *F1, *F2;$/;"	m	struct:setup
F_POS	src/structs.h	23;"	d
L	src/structs.h	/^	int L, N;$/;"	m	struct:setup
M	src/structs.h	/^	double M;$/;"	m	struct:mc_data
M	src/structs.h	/^	int *M;$/;"	m	struct:setup
MEASURE	src/main.cpp	8;"	d	file:
M_POS	src/structs.h	18;"	d
N	src/structs.h	/^	int L, N;$/;"	m	struct:setup
NUM_PHYSICAL_VALUES	src/structs.h	13;"	d
NUM_SPECIAL	src/structs.h	14;"	d
PCG32_INITIALIZER	src/pcg_basic.h	53;"	d
PCG_BASIC_H_INCLUDED	src/pcg_basic.h	32;"	d
PI	src/main.cpp	17;"	d	file:
QUADM_POS	src/structs.h	21;"	d
Q_DIST	src/main.cpp	16;"	d	file:
R	src/structs.h	/^	int seed, nseed, R;$/;"	m	struct:setup
SQE_POS	src/structs.h	19;"	d
SQM_POS	src/structs.h	20;"	d
T	src/structs.h	/^	float *T;$/;"	m	struct:setup
TR	src/structs.h	/^	float TR, dT, h;$/;"	m	struct:setup
WARPSIZE	src/main.cpp	11;"	d	file:
X_POS	src/structs.h	26;"	d
Xd_POS	src/structs.h	22;"	d
ZSQE_POS	src/structs.h	29;"	d
ZSQM_POS	src/structs.h	30;"	d
_CPUTOOLS_H_	src/cputools.h	7;"	d
_PT_H_	src/pt.h	7;"	d
_SETUP_H_	src/setup.h	7;"	d
_STRUCTS_H_	src/structs.h	7;"	d
_TOOLS_H_	src/tools.h	7;"	d
accum_block_statistics	src/tools.h	/^void accum_block_statistics( setup_t *s, int tid, int a, int b ){$/;"	f
accum_mcmc_statistics	src/tools.h	/^void accum_mcmc_statistics( setup_t *s, int tid, int a, int b){$/;"	f
accum_realization_statistics	src/tools.h	/^void accum_realization_statistics( setup_t *s, int tid, int a, int b, int realizations ){$/;"	f
adjustparams	src/setup.h	/^void adjustparams(setup_t *s){$/;"	f
avbcorrelation	src/structs.h	/^	double avbcorrelation;$/;"	m	struct:realization_data
avbstdev	src/structs.h	/^	double avbstdev;$/;"	m	struct:realization_data
avex	src/structs.h	/^	float *ex, *avex;$/;"	m	struct:setup
bdata	src/structs.h	/^	bdata_t 	bdata[NUM_PHYSICAL_VALUES];$/;"	m	struct:obset
bdata_t	src/structs.h	/^typedef block_data bdata_t;$/;"	t
block_data	src/structs.h	/^struct block_data{$/;"	s
blocks	src/structs.h	/^	int blocks, realizations;$/;"	m	struct:setup
computeE	src/cputools.h	/^float computeE(const int *s, const int *H, float h, int L){$/;"	f
computeF	src/cputools.h	/^double computeF(const int *hlat, const int width, const int height, const int length){$/;"	f
computeM	src/cputools.h	/^int computeM(const int *s, int N){$/;"	f
correlation	src/structs.h	/^	double correlation;$/;"	m	struct:realization_data
cpu_sweep	src/cputools.h	/^void cpu_sweep(int *s, const int *H, const float h, const int L, const float B, const int tid, pcg32_random_t *trng){$/;"	f
cs	src/structs.h	/^	int pts, ds, ms, fs, cs, period;$/;"	m	struct:setup
dT	src/structs.h	/^	float TR, dT, h;$/;"	m	struct:setup
ds	src/structs.h	/^	int pts, ds, ms, fs, cs, period;$/;"	m	struct:setup
ex	src/structs.h	/^	float *ex, *avex;$/;"	m	struct:setup
exE	src/structs.h	/^	float *exE, *E;$/;"	m	struct:setup
exchange	src/pt.h	/^int exchange(setup_t *s, int tid, int a, int b, int p, pcg32_random_t *trng){$/;"	f
filenames	src/structs.h	/^const char *filenames[] = {"energy.dat", "magnetization.dat", "sqenergy.dat", "sqmagnetization.dat", "quadmagnetization.dat", "dis_susceptibility.dat", "F.dat", "specific_heat.dat", "susceptibility.dat", "corrlen.dat", "exchange.dat", "zsqe.dat", "zsqm.dat"};$/;"	v
float3	src/structs.h	/^struct float3{$/;"	s
float3_t	src/structs.h	/^typedef float3 float3_t;$/;"	t
floatcomp	src/tools.h	/^int floatcomp(const void* elem1, const void* elem2){$/;"	f
freemem	src/tools.h	/^void freemem(setup_t *s){$/;"	f
fs	src/structs.h	/^	int pts, ds, ms, fs, cs, period;$/;"	m	struct:setup
getparams	src/setup.h	/^void getparams(setup_t *s, int argc, char **argv){$/;"	f
h	src/structs.h	/^	float TR, dT, h;$/;"	m	struct:setup
hH	src/structs.h	/^	int **hlat, *hH;$/;"	m	struct:setup
hdist	src/tools.h	/^void hdist(int *hH, const int N, const int tid, const int a, const int b, pcg32_random_t *trng){$/;"	f
hlat	src/structs.h	/^	int **hlat, *hH;$/;"	m	struct:setup
inc	src/pcg_basic.h	/^    uint64_t inc;               \/\/ Controls which RNG sequence (stream) is$/;"	m	struct:pcg_state_setseq_64
init	src/setup.h	/^void init(setup_t *s, int argc, char **argv){$/;"	f
lastx	src/structs.h	/^	double lastx;	$/;"	m	struct:block_data
lastx	src/structs.h	/^	double lastx;	$/;"	m	struct:realization_data
main	example/main.c	/^int main(int argc, char **argv) {$/;"	f
main	src/main.cpp	/^int main(int argc, char **argv){$/;"	f
make_output_folders	src/tools.h	/^void make_output_folders( const char *obs, const char *plot ){$/;"	f
make_realization_statistics	src/tools.h	/^void make_realization_statistics( setup_t *s ){$/;"	f
malloc_arrays	src/setup.h	/^void malloc_arrays( setup_t *s ){$/;"	f
mc_data	src/structs.h	/^struct mc_data{$/;"	s
mcdata_t	src/structs.h	/^typedef mc_data mcdata_t;$/;"	t
mdata	src/structs.h	/^	mcdata_t	mdata;$/;"	m	struct:obset
mean	src/structs.h	/^	double mean;$/;"	m	struct:block_data
mean	src/structs.h	/^	double mean;$/;"	m	struct:realization_data
measure	src/pt.h	/^void measure(setup_t *s, int tid, int a, int b, int p, pcg32_random_t *trng){$/;"	f
metropolis	src/tools.h	/^void metropolis(setup_t *s, int tid, int a, int b, const int ms, pcg32_random_t *trng){  $/;"	f
ms	src/structs.h	/^	int pts, ds, ms, fs, cs, period;$/;"	m	struct:setup
multicore_sweep	src/cputools.h	/^void multicore_sweep(int *s, const int *H, const float h, const int L, const float B, const int tid, pcg32_random_t *rng, int sthreads){$/;"	f
mzone	src/structs.h	/^	int mzone;$/;"	m	struct:setup
n	src/structs.h	/^	int n;$/;"	m	struct:block_data
n	src/structs.h	/^	int n;$/;"	m	struct:realization_data
newseed	src/setup.h	/^void newseed(setup_t* s){$/;"	f
nseed	src/structs.h	/^	int seed, nseed, R;$/;"	m	struct:setup
obset	src/structs.h	/^struct obset{$/;"	s
obset_t	src/structs.h	/^typedef obset obset_t;$/;"	t
obsfolder	src/structs.h	/^	const char *obsfolder;$/;"	m	struct:setup
obstable	src/structs.h	/^	obset_t *obstable;$/;"	m	struct:setup
one_configuration	src/tools.h	/^void one_configuration(int N, int* lat){$/;"	f
padding	src/pcg_basic.h	/^    int padding[12];            \/\/ padding$/;"	m	struct:pcg_state_setseq_64
pcg32_boundedrand	src/pcg_basic.c	/^uint32_t pcg32_boundedrand(uint32_t bound)$/;"	f
pcg32_boundedrand_r	src/pcg_basic.c	/^uint32_t pcg32_boundedrand_r(pcg32_random_t* rng, uint32_t bound)$/;"	f
pcg32_global	src/pcg_basic.c	/^static pcg32_random_t pcg32_global = PCG32_INITIALIZER;$/;"	v	file:
pcg32_random	src/pcg_basic.c	/^uint32_t pcg32_random()$/;"	f
pcg32_random_r	src/pcg_basic.c	/^uint32_t pcg32_random_r(pcg32_random_t* rng)$/;"	f
pcg32_random_t	src/pcg_basic.h	/^typedef struct pcg_state_setseq_64 pcg32_random_t;$/;"	t	typeref:struct:pcg_state_setseq_64
pcg32_srandom	src/pcg_basic.c	/^void pcg32_srandom(uint64_t seed, uint64_t seq)$/;"	f
pcg32_srandom_r	src/pcg_basic.c	/^void pcg32_srandom_r(pcg32_random_t* rng, uint64_t initstate, uint64_t initseq)$/;"	f
pcg_state_setseq_64	src/pcg_basic.h	/^struct pcg_state_setseq_64 {    \/\/ Internals are *Private*.$/;"	s
pcgrand	src/pcg_basic.c	/^double pcgrand(pcg32_random_t *rng){$/;"	f
period	src/structs.h	/^	int pts, ds, ms, fs, cs, period;$/;"	m	struct:setup
physical_results	src/tools.h	/^void physical_results(setup_t *s){$/;"	f
plotfolder	src/structs.h	/^	const char *plotfolder;$/;"	m	struct:setup
printH	src/tools.h	/^void printH(int *h, int N){$/;"	f
print_realization_statistics	src/tools.h	/^void print_realization_statistics( setup_t *s ){$/;"	f
printarray	src/tools.h	/^void printarray(T *a, int n, const char *name){$/;"	f
printindexarray	src/tools.h	/^void printindexarray(T *a, int *ind, int n, const char *name){$/;"	f
printparams	src/setup.h	/^void printparams(setup_t *s){$/;"	f
pt	src/pt.h	/^void pt(setup_t *s, int tid, int a, int b, pcg32_random_t *trng){$/;"	f
ptenergies	src/pt.h	/^void ptenergies(setup_t *s, int tid, int a, int b){$/;"	f
pts	src/structs.h	/^	int pts, ds, ms, fs, cs, period;$/;"	m	struct:setup
quadM	src/structs.h	/^	double quadM;$/;"	m	struct:mc_data
random_Hi	src/cputools.h	/^void random_Hi(int *hat, int N, pcg32_random_t *trng){$/;"	f
random_configuration	src/tools.h	/^void random_configuration(setup_t *s, int N, int* lat, pcg32_random_t *trng){$/;"	f
rdata	src/structs.h	/^	rdata_t		rdata[NUM_PHYSICAL_VALUES];$/;"	m	struct:obset
rdata_t	src/structs.h	/^typedef realization_data rdata_t;$/;"	t
realization_data	src/structs.h	/^struct realization_data{$/;"	s
realizations	src/structs.h	/^	int blocks, realizations;$/;"	m	struct:setup
reset	src/tools.h	/^void reset(setup_t *s, int tid, int a, int b){$/;"	f
reset_array	src/tools.h	/^void reset_array(T *a, int n, T val){$/;"	f
reset_block_statistics	src/tools.h	/^void reset_block_statistics( setup_t *s, int tid, int a, int b){$/;"	f
reset_mcmc_statistics	src/tools.h	/^void reset_mcmc_statistics( setup_t *s, int tid, int a, int b){$/;"	f
reset_realization_statistics	src/tools.h	/^void reset_realization_statistics( setup_t *s, int R){$/;"	f
rng	src/structs.h	/^    pcg32_random_t **rng;$/;"	m	struct:setup
rthreads	src/structs.h	/^	int rthreads, sthreads;$/;"	m	struct:setup
rts	src/structs.h	/^	int *rts, *trs;$/;"	m	struct:setup
run_sys_call	src/tools.h	/^int run_sys_call(char *buffer){$/;"	f
seed	src/structs.h	/^	int seed, nseed, R;$/;"	m	struct:setup
set_lattice_up	src/tools.h	/^void set_lattice_up(int *s, int N){$/;"	f
setup	src/structs.h	/^struct setup{$/;"	s
setup_t	src/structs.h	/^typedef setup setup_t;$/;"	t
simulation	src/tools.h	/^void simulation(setup_t *s, int tid, int a, int b, pcg32_random_t *trng){$/;"	f
sqE	src/structs.h	/^	double sqE;$/;"	m	struct:mc_data
sqM	src/structs.h	/^	double sqM;$/;"	m	struct:mc_data
state	src/pcg_basic.h	/^    uint64_t state;             \/\/ RNG state.  All values are possible.$/;"	m	struct:pcg_state_setseq_64
stdev	src/structs.h	/^	double stdev;$/;"	m	struct:realization_data
sthreads	src/structs.h	/^	int rthreads, sthreads;$/;"	m	struct:setup
swap	src/pt.h	/^void swap(setup_t *s, int a, int b ){$/;"	f
symbols	src/structs.h	/^const char *symbols[] = {"E", "M", "sqE", "sqM", "quadM", "Xd", "F", "C", "X", "CORRLEN", "EXCHANGE", "ZSQE", "ZSQM"};$/;"	v
threadset	src/tools.h	/^void threadset(setup_t *s, int *tid, int *nt, int *r){$/;"	f
trs	src/structs.h	/^	int *rts, *trs;$/;"	m	struct:setup
variance_step	src/tools.h	/^void variance_step(double x,  int *n, double *mean, double *w1, double *w2, const double x1, double *lastx){$/;"	f
w1	src/structs.h	/^	double w1;$/;"	m	struct:block_data
w1	src/structs.h	/^	double w1;$/;"	m	struct:realization_data
w2	src/structs.h	/^	double w2;$/;"	m	struct:block_data
w2	src/structs.h	/^	double w2;$/;"	m	struct:realization_data
write_binder	src/tools.h	/^void write_binder( setup_t *s ){$/;"	f
write_realization_statistics	src/tools.h	/^void write_realization_statistics( setup_t* s){$/;"	f
write_specific_heat	src/tools.h	/^void write_specific_heat( setup_t *s ){$/;"	f
write_susceptibility	src/tools.h	/^void write_susceptibility( setup_t *s ){$/;"	f
x	src/structs.h	/^    float x;$/;"	m	struct:float3
x1	src/structs.h	/^	double x1;$/;"	m	struct:block_data
x1	src/structs.h	/^	double x1;$/;"	m	struct:realization_data
y	src/structs.h	/^    float y;$/;"	m	struct:float3
z	src/structs.h	/^    float z;$/;"	m	struct:float3
